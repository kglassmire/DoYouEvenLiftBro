// <auto-generated />
using System;
using DoYouEvenLiftBro.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DoYouEvenLiftBro.DAL.Migrations
{
    [DbContext(typeof(DoYouEvenLiftBroContext))]
    [Migration("20181027023044_AddingEntities")]
    partial class AddingEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:citext", "'citext', '', ''")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.Exercise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id");

                    b.Property<long?>("WorkoutId")
                        .HasColumnName("workout_id");

                    b.HasKey("Id")
                        .HasName("pk_exercises");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_exercises_name");

                    b.HasIndex("UserId")
                        .HasName("ix_exercises_user_id");

                    b.HasIndex("WorkoutId")
                        .HasName("ix_exercises_workout_id");

                    b.ToTable("exercises");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.MuscleGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnName("created");

                    b.Property<long?>("ExerciseId")
                        .HasColumnName("exercise_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_muscle_groups");

                    b.HasIndex("ExerciseId")
                        .HasName("ix_muscle_groups_exercise_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_muscle_groups_name");

                    b.HasIndex("UserId")
                        .HasName("ix_muscle_groups_user_id");

                    b.ToTable("muscle_groups");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.Rep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ConcentricDuration")
                        .HasColumnName("concentric_duration");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnName("created");

                    b.Property<int>("EccentricDuration")
                        .HasColumnName("eccentric_duration");

                    b.Property<long?>("SetId")
                        .HasColumnName("set_id");

                    b.Property<long?>("TypeId")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_reps");

                    b.HasIndex("SetId")
                        .HasName("ix_reps_set_id");

                    b.HasIndex("TypeId")
                        .HasName("ix_reps_type_id");

                    b.ToTable("reps");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.RepType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("User")
                        .HasColumnName("user");

                    b.HasKey("Id")
                        .HasName("pk_rep_types");

                    b.ToTable("rep_types");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("asp_net_roles");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.Set", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnName("created");

                    b.Property<long?>("ExerciseId")
                        .HasColumnName("exercise_id");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sets");

                    b.HasIndex("ExerciseId")
                        .HasName("ix_sets_exercise_id");

                    b.HasIndex("UserId")
                        .HasName("ix_sets_user_id");

                    b.ToTable("sets");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("asp_net_users");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.Workout", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_workouts");

                    b.HasIndex("UserId")
                        .HasName("ix_workouts_user_id");

                    b.ToTable("workouts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.Exercise", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_exercises_asp_net_users_user_id");

                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .HasConstraintName("fk_exercises_workouts_workout_id");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.MuscleGroup", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.Exercise")
                        .WithMany("MuscleGroups")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("fk_muscle_groups_exercises_exercise_id");

                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_muscle_groups_asp_net_users_user_id");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.Rep", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.Set", "Set")
                        .WithMany()
                        .HasForeignKey("SetId")
                        .HasConstraintName("fk_reps_sets_set_id");

                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.RepType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_reps_rep_types_type_id");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.Set", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("fk_sets_exercises_exercise_id");

                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_sets_asp_net_users_user_id");
                });

            modelBuilder.Entity("DoYouEvenLiftBro.DAL.Entities.Workout", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_workouts_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("DoYouEvenLiftBro.DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
